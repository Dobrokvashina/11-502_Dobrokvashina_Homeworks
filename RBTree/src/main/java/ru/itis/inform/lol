struct rbtree *rbtree_fixup_add(struct rbtree *root,
struct rbtree *node)
{
struct rbtree *uncle;
/* Current node is RED */
while (node != root &&
node->parent->color == COLOR_RED)
{
if (node->parent ==
node->parent->parent->left)
{
/* node in left tree of grandfather */
uncle = node->parent->parent->right;
if (uncle->color == COLOR_RED) {
/* Case 1 - uncle is RED */
node->parent->color = COLOR_BLACK;
uncle->color = COLOR_BLACK;
node->parent->parent->color = COLOR_RED;
node = node->parent->parent;
} else {
/* Cases 2 & 3 - uncle is BLACK */
if (node == node->parent->right) {
/* Reduce case 2 to case 3 */
node = node->parent;
root = rbtree_left_rotate(root,
node);
}
/* Case 3 */
node->parent->color = COLOR_BLACK;
node->parent->parent->color =
COLOR_RED;
root = rbtree_right_rotate(root,
node->parent->parent);
}
} else {
/* Node in right tree of grandfather */
uncle = node->parent->parent->left;
if (uncle->color == COLOR_RED) {
/* Uncle is RED */
node->parent->color = COLOR_BLACK;
uncle->color = COLOR_BLACK;
node->parent->parent->color =
COLOR_RED;
node = node->parent->parent;
} else {
/* Uncle is BLACK */
if (node == node->parent->left) {
node = node->parent;
root = rbtree_right_rotate(root,
node);
}
node->parent->color = COLOR_BLACK;
node->parent->parent->color =
COLOR_RED;
root = rbtree_left_rotate(root,
node->parent->parent);
}
}
}
root->color = COLOR_BLACK;
return root;
}